`timescale 1ns / 1ps
`include "constants.vh"

module Tracklet_processingTB#( // for test bench
parameter INPUT_SIZE = 36,
parameter INPUT_NUM = 84
)(
    input clk,
    input reset,
    input en_proc,
    input [2:0] BX,
    // inputs
    input [INPUT_SIZE-1:0] inputs [0:INPUT_NUM-1],
    input                  valids [0:INPUT_NUM-1]
    // outputs
);

    reg [5:0] clk_cnt;
    initial clk_cnt = 6'b0;

    always @(posedge clk) begin
        if (en_proc) clk_cnt <= clk_cnt + 1'b1;
		else clk_cnt <= 6'b0;
		if (clk_cnt == (`NCLKPROC - 1'b1)) clk_cnt <= 6'b0;
    end

    wire start1, IL_start;
	assign start1 = (clk_cnt==6'b0 && en_proc);

    wire [INPUT_SIZE-1:0] input_link       [0:INPUT_NUM-1];
    wire                  input_link_wr_en [0:INPUT_NUM-1];

    genvar i;
	generate
        for (i=0; i < INPUT_NUM; i = i + 1'b1) begin: gen_inmem
            if (i==0) begin
                prep_mem #(INPUT_SIZE) prepmem(
                    .clk(clk), .reset(reset), .start(start1), .done(IL_start),
                    .data_in(inputs[i]), .valid_in(valids[i]), .data_out(input_link[i]), .wr_en(input_link_wr_en[i]));
            end else begin
                prep_mem #(INPUT_SIZE) prepmem(
                    .clk(clk), .reset(reset), .start(start1), .done(),
                    .data_in(inputs[i]), .valid_in(valids[i]), .data_out(input_link[i]), .wr_en(input_link_wr_en[i]));
            end
        end
	endgenerate

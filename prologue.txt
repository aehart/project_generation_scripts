`timescale 1ns / 1ps
`include "constants.vh"
//////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date: 09/28/2014 11:01:39 AM
// Design Name:
// Module Name: Tracklet_processing
// Project Name:
// Target Devices:
// Tool Versions:
// Description:
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
//////////////////////////////////////////////////////////////////////////////////


module Tracklet_processing(
input clk,
input reset,
input en_proc,
// programming interface
// inputs
input wire io_clk,                    // programming clock
input wire io_sel,                    // this module has been selected for an I/O operation
input wire io_sync,
// start the I/O operation
input wire [15:0] io_addr,        // slave address, memory or register. Top 12 bits already consumed.
input wire io_rd_en,                // this is a read operation
input wire io_wr_en,                // this is a write operation
input wire [31:0] io_wr_data,    // data to write for write operations
// outputs
output wire [31:0] io_rd_data,    // data returned for read operations
output wire io_rd_ack,                // 'read' data from this module is ready
//clocks
input wire [2:0] BX,
input wire first_clk,
input wire not_first_clk,
// inputs
input [31:0] input_link1_reg1,
input [31:0] input_link1_reg2,
input [31:0] input_link2_reg1,
input [31:0] input_link2_reg2,
input [31:0] input_link3_reg1,
input [31:0] input_link3_reg2,
input [31:0] input_link4_reg1,
input [31:0] input_link4_reg2,
input [31:0] input_link5_reg1,
input [31:0] input_link5_reg2,
input [31:0] input_link6_reg1,
input [31:0] input_link6_reg2,
// outputs
input [15:0] BRAM_OUTPUT_addr, // 1 for now, add more later
input BRAM_OUTPUT_clk,
input [31:0] BRAM_OUTPUT_din,
output [31:0] BRAM_OUTPUT_dout,
input BRAM_OUTPUT_en,
input BRAM_OUTPUT_rst,
input [3:0] BRAM_OUTPUT_we,
// Projections L1L2
output wire [50:0] PT_L1L2_Plus_To_DataStream,
output wire PT_L1L2_Plus_To_DataStream_en,
output wire [50:0] PT_L1L2_Minus_To_DataStream,
output wire PT_L1L2_Minus_To_DataStream_en,
input wire [50:0] PT_L1L2_Plus_From_DataStream,
input wire PT_L1L2_Plus_From_DataStream_en,
input wire [50:0] PT_L1L2_Minus_From_DataStream,
input wire PT_L1L2_Minus_From_DataStream_en,
// Projections L3L4
output wire [50:0] PT_L3L4_Plus_To_DataStream,
output wire PT_L3L4_Plus_To_DataStream_en,
output wire [50:0] PT_L3L4_Minus_To_DataStream,
output wire PT_L3L4_Minus_To_DataStream_en,
input wire [50:0] PT_L3L4_Plus_From_DataStream,
input wire PT_L3L4_Plus_From_DataStream_en,
input wire [50:0] PT_L3L4_Minus_From_DataStream,
input wire PT_L3L4_Minus_From_DataStream_en,
// Projections L5L6
output wire [50:0] PT_L5L6_Plus_To_DataStream,
output wire PT_L5L6_Plus_To_DataStream_en,
output wire [50:0] PT_L5L6_Minus_To_DataStream,
output wire PT_L5L6_Minus_To_DataStream_en,
input wire [50:0] PT_L5L6_Plus_From_DataStream,
input wire PT_L5L6_Plus_From_DataStream_en,
input wire [50:0] PT_L5L6_Minus_From_DataStream,
input wire PT_L5L6_Minus_From_DataStream_en,
// Matches L1L2
output wire [38:0] MT_L1L2_Plus_To_DataStream,
output wire MT_L1L2_Plus_To_DataStream_en,
output wire [38:0] MT_L1L2_Minus_To_DataStream,
output wire MT_L1L2_Minus_To_DataStream_en,
input wire [38:0] MT_L1L2_Plus_From_DataStream,
input wire MT_L1L2_Plus_From_DataStream_en,
input wire [38:0] MT_L1L2_Minus_From_DataStream,
input wire MT_L1L2_Minus_From_DataStream_en,
// Matches L3L4
output wire [38:0] MT_L3L4_Plus_To_DataStream,
output wire MT_L3L4_Plus_To_DataStream_en,
output wire [38:0] MT_L3L4_Minus_To_DataStream,
output wire MT_L3L4_Minus_To_DataStream_en,
input wire [38:0] MT_L3L4_Plus_From_DataStream,
input wire MT_L3L4_Plus_From_DataStream_en,
input wire [38:0] MT_L3L4_Minus_From_DataStream,
input wire MT_L3L4_Minus_From_DataStream_en,
// Matches L5L6
output wire [38:0] MT_L5L6_Plus_To_DataStream,
output wire MT_L5L6_Plus_To_DataStream_en,
output wire [38:0] MT_L5L6_Minus_To_DataStream,
output wire MT_L5L6_Minus_To_DataStream_en,
input wire [38:0] MT_L5L6_Plus_From_DataStream,
input wire MT_L5L6_Plus_From_DataStream_en,
input wire [38:0] MT_L5L6_Minus_From_DataStream,
input wire MT_L5L6_Minus_From_DataStream_en,
// Track Fits
output wire [125:0] TF_L1L2_DataStream,
output wire [125:0] TF_L3L4_DataStream,
output wire [125:0] TF_L5L6_DataStream,
output wire [125:0] TF_F1F2_DataStream,
output wire [125:0] TF_F3F4_DataStream

);

// Address bits "io_addr[31:30] = 2'b01" are consumed when selecting 'slave6'
// Address bits "io_addr[29:28] = 2'b01" are consumed when selecting 'tracklet_processing'
wire InputLink_R1Link1_io_sel, TPars_L1L2_io_sel;
wire InputLink_R1Link2_io_sel, TPars_L3L4_io_sel;
wire InputLink_R1Link3_io_sel, TPars_L5L6_io_sel;
wire io_sel_R3_io_block;
assign InputLink_R1Link1_io_sel = io_sel && (io_addr[13:10] == 4'b0001);
assign InputLink_R1Link2_io_sel = io_sel && (io_addr[13:10] == 4'b0010);
assign InputLink_R1Link3_io_sel = io_sel && (io_addr[13:10] == 4'b0011);
assign TPars_L1L2_io_sel  = io_sel && (io_addr[13:10] == 4'b0100);
assign TPars_L3L4_io_sel  = io_sel && (io_addr[13:10] == 4'b0101);
assign TPars_L5L6_io_sel  = io_sel && (io_addr[13:10] == 4'b0110);
assign io_sel_R3_io_block = io_sel && (io_addr[13:10] == 4'b1000);
// data busses for readback
wire [31:0] InputLink_R1Link1_io_rd_data, TPars_L1L2_io_rd_data;
wire [31:0] InputLink_R1Link2_io_rd_data, TPars_L3L4_io_rd_data;
wire [31:0] InputLink_R1Link3_io_rd_data, TPars_L5L6_io_rd_data;

wire IL1_D3_LR1_D3_empty;
wire IL2_D3_LR2_D3_empty;
wire IL3_D3_LR3_D3_empty;

reg [5:0] clk_cnt;

//wire enable_gen;
//enable_generator en_gen(
//.clk(clk),
//.in( (~IL1_D3_LR1_D3_empty | ~IL2_D3_LR2_D3_empty | ~IL3_D3_LR3_D3_empty) & bc0_i ),
//.out(enable_gen)
//);

initial
clk_cnt = 6'b0;
always @(posedge clk) begin
if(en_proc)
clk_cnt <= clk_cnt + 1'b1;
else begin
clk_cnt <= 6'b0;
end
if(clk_cnt == (`tmux - 1'b1))
clk_cnt <= 6'b0;
end

assign start1_0 = (clk_cnt == 6'd0 && en_proc);
assign start2_0 = done1_0;
assign start3_0 = done2_0;
assign start4_0 = done3_0;
assign start5_0 = done4_0;
assign startproj5_0 = done_proj4_0;
assign start6_0 = done5_0;
assign start7_0 = done6_0;
assign start8_0 = done7_0;
assign start9_0 = done8_0;
assign start10_0 = done9_0;
assign start11_0 = done10_0;

assign start1_5 = (clk_cnt == 6'd0 && en_proc);
//assign start1_5 = en_proc;
assign start2_5 = done1_5;
assign start3_5 = done2_5;
assign start4_5 = done3_5;
assign start5_5 = done4_5;
assign start6_5 = done5_5;
assign start7_5 = done6_5;
assign start8_5 = done7_5;
assign start9_5 = done8_5;
assign start10_5 = done9_5;

assign done1_5 = done1_5_1;
assign done2_5 = done2_5_1;
assign done3_5 = done3_5_1;
assign done4_5 = done4_5_1;
assign done5_5 = done5_5_1;
assign done6_5 = done6_5_1;
assign done7_5 = done7_5_1;
assign done8_5 = done8_5_1;
assign done9_5 = done9_5_1;

